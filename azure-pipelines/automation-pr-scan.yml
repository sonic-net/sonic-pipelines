trigger: none
pr: none

schedules:
- cron: "11 */2 * * *"
  branches:
    include:
    - main
  always: true

jobs:
- job: PRChecker
  pool: sonic-ubuntu-1c
  variables:
    - group: sonicbld
  timeoutInMinutes: 60
  steps:
    - checkout: none
    - script: |
        set -ex
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
        sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
        sudo apt update
        sudo apt install gh jq -y

        echo $TOKEN | gh auth login --with-token
      env:
        TOKEN: $(GITHUB-TOKEN)
      displayName: install dependencies
    - script: |
        set -ex
        # PR merge run per 2 hours
        # Other operation run per day.
        # Cherry pick PR:
        # more than 3 days, comment @author to check
        # more than 10 days, stop comment.
        # more than 26 days, comment @author PR will be closed
        # more than 30 days, close PR
        date_3d_ago=$(date --date "3 day ago" -u +"%FT%TZ")
        date_10d_ago=$(date --date "10 day ago" -u +"%FT%TZ")
        date_26d_ago=$(date --date "26 day ago" -u +"%FT%TZ")
        date_30d_ago=$(date --date "30 day ago" -u +"%FT%TZ")
        date_now=$(date -u +"%T")
        operate=false
        [[ "$date_now" > "22:00:00" ]] && operate=true
        repos="sonic-net/sonic-buildimage sonic-net/sonic-utilities sonic-net/sonic-swss sonic-net/sonic-sairedis sonic-net/sonic-swss-common sonic-net/sonic-dbsyncd sonic-net/sonic-gnmi sonic-net/sonic-host-services sonic-net/sonic-linkmgrd sonic-net/sonic-linux-kernel sonic-net/sonic-mgmt-common sonic-net/sonic-mgmt-framework sonic-net/sonic-platform-common sonic-net/sonic-platform-daemons sonic-net/sonic-py-swsssdk sonic-net/sonic-restapi sonic-net/sonic-snmpagent sonic-net/sonic-wpa-supplicant sonic-net/sonic-dhcp-relay Azure/sonic-swss.msft Azure/sonic-sairedis.msft Azure/sonic-utilities.msft Azure/sonic-platform-daemons.msft Azure/sonic-platform-common.msft Azure/sonic-linux-kernel.msft Azure/SAI.msft Azure/sonic-buildimage-msft Azure/sonic-mgmt.msft Azure/sonic-swss-common.msft"
        rm -rf failure_prs.log skip_prs.log
        rc=0
          for repo in $repos $(EXTRA_REPOS); do
            echo ======== working for $repo ========
            echo $repo >> failure_prs.log
            prs=$(gh pr list -A mssonicbld --label automerge -R $repo -L 100 --json body,title,url,labels,statusCheckRollup,createdAt,baseRefName,comments)
            c=$(echo $prs | jq length)
            for ((i=0; i<$c; i++)); do
              set +x
              pr=$(echo $prs | jq .[$i])
              echo $pr | jq [.url,.author.login,.labels[].name]
              url=$(echo $pr | jq .url -r)
              body=$(echo $pr | jq .body -r)
              title=$(echo $pr | jq .title -r)
              origin_pr_url=$(echo $pr | jq .comments[].body -r | grep '^Original PR: ' | grep -Eo "https://github.com/.*/pull/[0-9]*" || true)
              created_at=$(echo $pr | jq .createdAt -r)
              checks=$(echo $pr | jq .statusCheckRollup)
              base_ref=$(echo $pr | jq .baseRefName -r)
              echo $repo | grep ^Azure/ && base_ref=msft-$base_ref
              cc=$(echo $checks | jq length)
              set -x
              pr_success=true
              check_name=''
              for ((j=0; j<$cc; j++)); do
                set +x
                check=$(echo $checks | jq .[$j])
                check_name=$(echo $check | jq .name -r)
                echo $check | jq [.name,.status,.conclusion]
                echo $check | jq .status -r | grep -i queued && pr_success=false || continue
                echo $check | jq .conclusion -r | grep -i -e failure -e cancelled && pr_success=false || continue
                set -x
                if echo $check_name | grep -i -e ms_conflict -e ms_checker; then
                  # check ms_
                  $operate && [[ $date_3d_ago > $(echo $check | jq -r .startedAt) ]] && gh pr comment $url --body "@liushilongbuaa, please check $check_name"
                fi
                if echo $check_name | grep -i -e "Azure.sonic" -e "sonic-net.sonic" | grep -v '('; then
                  echo $check | jq .status | grep -i -e in_progress -e queued && continue
                  # rerun PR checker
                  $operate && echo $check | jq .conclusion -r | grep -i -e failure -e cancelled && gh pr comment $url --body "/azp run $check_name"
                fi
              done
              # If auto cherry pick PRs failed, comment in original PR and close cherry pick PR
              if [ -n "$origin_pr_url" ] && [[ $created_at < $date_3d_ago ]] && ! $pr_success;then
                author=$(gh pr view $origin_pr_url --json author | jq .author.login -r)
                echo "Original author will check."
                $operate && [[ $created_at > $date_10d_ago ]] && gh pr comment $origin_pr_url --body "@$author cherry pick PR didn't pass PR checker. Please check!!!<br>$url"
                # $operate && [[ $created_at < $date_26d_ago ]] && gh pr comment $origin_pr_url --body "@$author cherry pick PR didn't pass PR checker. Please check!!! Auto cherry pick PR will be closed in 3 days.<br>$url"
                # $operate && [[ $created_at < $date_30d_ago ]] && echo "$url Closed" && gh pr close $url
              fi
              if ! $pr_success; then
                echo "    $url" >> skip_prs.log
                echo $pr | jq '.statusCheckRollup[] | "        "+.status+" "+.conclusion+"  "+.name' -r >> skip_prs.log
                continue
              fi
              # merge the PR
              echo ========Merging  PR========
              opt="--squash"
              if echo $title | grep "^\[code sync\]";then
                opt="--merge"
              fi
              echo "    $url"  >> failure_prs.log
              if output=$(gh pr merge $opt --admin -R $repo $url -b "$body" 2>&1); then
                [ -n "$origin_pr_url" ] && gh pr edit $origin_pr_url -R $repo --add-label "Included in $base_ref Branch" --remove-label "Created PR to $base_ref Branch,Cherry Pick Conflict_$base_ref"
              else
                (( ++rc ))
              fi
              echo "        $output"  >> failure_prs.log
              echo ========Finished PR========
            done
          done
        if (( rc >= 10 )); then exit $rc; fi
        exit 0
      displayName: scaning
    - script: |
        set -ex
        [ -f skip_prs.log ] && cat skip_prs.log
        echo ====================================
        [ -f failure_prs.log ] && cat failure_prs.log
      displayName: show result
      condition: always()
  
